package hypergraphDB;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import hypergraphDB.Relations;
import javafx.application.Application;
import org.hypergraphdb.HGConfiguration;
import org.hypergraphdb.HGEnvironment;
import org.hypergraphdb.HGQuery.hg;
import org.hypergraphdb.HyperGraph;
import org.hypergraphdb.algorithms.DefaultALGenerator;
import org.hypergraphdb.algorithms.HGALGenerator;
import org.hypergraphdb.algorithms.HGBreadthFirstTraversal;
import org.hypergraphdb.algorithms.HGTraversal;
import org.hypergraphdb.app.wordnet.HGWordNetLoader;
import org.hypergraphdb.app.wordnet.SemTools;
import org.hypergraphdb.HGHandle;
import org.hypergraphdb.HGPlainLink;
import org.hypergraphdb.app.wordnet.WNGraph;
import org.hypergraphdb.app.wordnet.data.*;
import org.hypergraphdb.app.wordnet.ext.ConceptualDensity;
import org.hypergraphdb.util.Pair;
import static java.nio.charset.StandardCharsets.*;

import javafx.collections.ObservableList;
import javafx.scene.control.ListView;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.text.TextFlow;
import javafx.scene.control.TextField;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.Border;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Tooltip;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.collections.FXCollections;
import javafx.scene.control.cell.ComboBoxListCell;
import javafx.scene.control.ChoiceBox;
import javafx.beans.value.ObservableValue;
import javafx.beans.value.ChangeListener;

import java.awt.Color;
import java.lang.reflect.Field;
import java.net.URL;

public class Main extends Application {
	public static List<HGHandle> NounList;
	public static List<HGHandle> VerbList;
	public static List<HGHandle> AdjList;
	public static List<HGHandle> AdverbList;
	
	public static HyperGraph graph;
	public static HyperGraph englishGraph;
	public static HyperGraph russianGraph;
	public static WNGraph wnGraph;
	public static WNGraph englishWNGraph;
	public static WNGraph russianWNGraph;

	public static HGHandle wordH;
	public static HGHandle reqWord;
	public static int languageNum = 0; // 0 - Английский, 1 - Русский.
	
	
	@Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("WordNet Editor");
        ViewElements viewElements = new ViewElements();
        
        String[] notFoundLabel = {"Not found\n", "Не найдено\n"};
        TextField wordSearchField = new TextField();
        wordSearchField.setPrefSize(150, 20);
        
        TextFlow wordMeaningArea = new TextFlow();
        wordMeaningArea.setMaxSize(400,400);
        wordMeaningArea.setPrefSize(400,400);
     
        Button searchButton = new Button();
        searchButton.setText("Search");
        
        
        ChoiceBox<String> cb = new ChoiceBox<String>(FXCollections.observableArrayList("EnWordNet", "RUWordNet"));
        cb.getSelectionModel().selectFirst();
        cb.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener<Number>() {
          public void changed(ObservableValue ov, Number value, Number new_value) {
            if (ov.getValue() == "EnWordnet") {
                graph = englishGraph;
				wnGraph = englishWNGraph;
				languageNum = 0;
				searchButton.setText("Search");
            }
            else {
            	graph = russianGraph;
				wnGraph = russianWNGraph;	
				languageNum = 1;
				searchButton.setText("Поиск");
            }
          }
        });
        
        Button enWordnetButton = new Button();
        enWordnetButton.setText("EnWordNet");
        Button ruWordnetButton = new Button();
        ruWordnetButton.setText("RuWordnet");
        
        Text[] NounHeader = {new Text("Noun:\n"), new Text("Существительное:\n")};
        Text[] VerbHeader = {new Text("Verb: \n"), new Text("Глагол:\n")};
        Text[] AdjHeader = {new Text("Adjective: \n"), new Text("Прилагательное:\n")};
        Text[] AdverbHeader = {new Text("Adverb: \n"), new Text("Наречие:\n")};
        Text[][] headers = {NounHeader, VerbHeader, AdjHeader, AdverbHeader};
        String style = "-fx-font-weight: bold";
        viewElements.createHeader(headers, style);

//        extText[] exampHeader = {new extText("    Examples: "), new extText("    Примеры: ")};
//        for (int i = 0; i < 2; i++) {
//        	exampHeader[i].setFont(new Font(12));
//        	exampHeader[i].setStyle("-fx-font-style: italic");
//        }

        
//        //Getting and printing synonyms of the word "dog".
//        List<String> synonyms = new ArrayList<String>();
//        String synString = null; // String of synonyms in one line
//        HGHandle dogHandle = wnGraph.findWord("dog");
//        Word dogWord = graph.get(dogHandle); // Target word 
//        List<SynsetLink> dogSenses = hg.getAll(graph,hg.and(hg.type(NounSynsetLink.class),
//        		hg.incident(dogHandle)));
//        
//        for (SynsetLink dogSense : dogSenses) {
//        	System.out.println("Synonyms that mean '" + dogSense.getGloss() + "':");
//        	dogSense.forEach(h -> {
//        		Word tmpWord = graph.get(h);
//        		if (!tmpWord.equals(dogWord))
//        			synonyms.add(tmpWord.getLemma());
//        	});
//        	synString = String.join(",", synonyms) + ".";
//        	System.out.println(synString);
//        }
        

//        // Finding the word "big"
//        HGHandle bigWord = wnGraph.findWord("big");
//        // Getting all senses of the word
//        List<SynsetLink> adjSenseList = hg.getAll(graph,hg.and(hg.type(AdjSynsetLink.class),
//        		hg.incident(bigWord)));
//        // Getting the only meaning that has antonyms. It is number 9 (according to tests)
//    	SynsetLink senseWithAntonyms = adjSenseList.get(9); 
//    	// Getting the list of antonyms
//        List<Antonym> antonymList = graph.getAll(hg.and(hg.type(Antonym.class),
//        		hg.incident(graph.getHandle(senseWithAntonyms))));
//        System.out.println("Adjective's meaning: " + senseWithAntonyms.getGloss());
//        
//        // Getting and printing antonyms
//        int antonymListSize = antonymList.size();
//        for (int i = 0; i < antonymListSize; i++) {
//        	Antonym antonym = antonymList.get(i);
//        	for (int k = 0; k < antonym.getArity(); k++) {
//        		HGHandle handle = antonym.getTargetAt(k);
//        		SynsetLink sen = graph.get(handle);
//        		if (!sen.equals(senseWithAntonyms)) {
//        			sen.forEach(c -> {
//            			Word tempWord = graph.get(c);
//            			if (!tempWord.equals(bigWord)) {
//            				System.out.println(tempWord.getLemma());
//            			}
//            		});
//        		}
//        		
//        	}
//        }
        
        
//        
//        
        /**
         * Отношение Kind of. Отображает связть более общего слова с более конкретным
         * Например, собака - овчарка и
        */
       
        /*HGHandle bigWord = wnGraph.findWord("animal");
        // Getting all senses of the word
        List<SynsetLink> adjSenseList = hg.getAll(graph,hg.and(hg.type(NounSynsetLink.class),
        		hg.incident(bigWord)));
        // Getting the only meaning that has antonyms. It is number 9 (according to tests)
    	SynsetLink senseWithAntonyms = adjSenseList.get(0); 
    	// Getting the list of antonyms
        List<KindOf> antonymList = graph.getAll(hg.and(hg.type(KindOf.class),
        		hg.incident(graph.getHandle(senseWithAntonyms))));
        System.out.println("Adjective's meaning: " + senseWithAntonyms.getGloss());
        
        // Getting and printing antonyms
        int antonymListSize = antonymList.size();
        for (int i = 0; i < antonymListSize; i++) {
        	KindOf antonym = antonymList.get(i);
        	for (int k = 0; k < antonym.getArity(); k++) {
        		HGHandle handle = antonym.getTargetAt(k);
        		SynsetLink sen = graph.get(handle);
        		if (!sen.equals(senseWithAntonyms)) {
        			sen.forEach(c -> {
            			Word tempWord = graph.get(c);
            			if (!tempWord.equals(bigWord)) {
            				System.out.println(tempWord.getLemma());
            			}
            		});
        		}
        		
        	}
        }
        */
        
//        HGHandle bigWord = wnGraph.findWord("chair");
//        // Getting all senses of the word
//        List<SynsetLink> adjSenseList = hg.getAll(graph,hg.and(hg.type(NounSynsetLink.class),
//        		hg.incident(bigWord)));
//        // Getting the only meaning that has antonyms. It is number 9 (according to tests)
//    	SynsetLink senseWithAntonyms = adjSenseList.get(3); 
//    	// Getting the list of antonyms
//        List<PartOf> antonymList = graph.getAll(hg.and(hg.type(PartOf.class),
//        		hg.incident(graph.getHandle(senseWithAntonyms))));
//        System.out.println("Adjective's meaning: " + senseWithAntonyms.getGloss());
//        
//        // Getting and printing antonyms
//        int antonymListSize = antonymList.size();
//        System.out.println(antonymListSize);
//        for (int i = 0; i < antonymListSize; i++) {
//        	PartOf antonym = antonymList.get(i);
//        	for (int k = 0; k < antonym.getArity(); k++) {
//        		HGHandle handle = antonym.getTargetAt(k);
//        		SynsetLink sen = graph.get(handle);
//        		if (!sen.equals(senseWithAntonyms)) {
//        			sen.forEach(c -> {
//            			Word tempWord = graph.get(c);
//            			if (!tempWord.equals(bigWord)) {
//            				System.out.println(tempWord.getLemma());
//            			}
//            		});
//        		}
//        		
//        	}
//        }
        
        
     // Finding the word "big"
//      HGHandle bigWord = wnGraph.findWord("animal");
//      // Getting all senses of the word
//      List<SynsetLink> adjSenseList = hg.getAll(graph,hg.and(hg.type(NounSynsetLink.class),
//      		hg.incident(bigWord)));
      // Getting the only meaning that has antonyms. It is number 9 (according to tests)

//  	SynsetLink senseWithAntonyms = adjSenseList.get(0); 
//  	// Getting the list of antonyms
//      List<Isa> antonymList = graph.getAll(hg.and(hg.type(Isa.class),
//      		hg.incident(graph.getHandle(senseWithAntonyms))));
//      System.out.println("Adjective's meaning: " + senseWithAntonyms.getGloss());
////      
//      
//      System.out.println(antonymList.size());
////      // Getting and printing antonyms
//      int antonymListSize = antonymList.size();
//      for (int i = 0; i < antonymListSize; i++) {
//      	Isa antonym = antonymList.get(i);
//      	for (int k = 0; k < antonym.getArity(); k++) {
//      		HGHandle handle = antonym.getTargetAt(k);
//      		SynsetLink sen = graph.get(handle);
//      		if (!sen.equals(senseWithAntonyms)) {
//      			sen.forEach(c -> {
//          			Word tempWord = graph.get(c);
//          			if (!tempWord.equals(bigWord)) {
//          				System.out.println(tempWord.getLemma());
//          			}
//          		});
//      		}
//      		
//      	}
//      }
        
        
        
        
        //        SynsetLink f = antonyms2.get(0);
//        f.forEach(h -> {
//    		Word tmpWord = graph.get(h);
//    		System.out.println(tmpWord.getLemma());
//    	});
//        int listSize = antonyms.size();
//        for (int i = 0; i < listSize; i++) {
//        	SemanticLink meaning = antonyms.get(i);
//        	for (int j = 0; j < meaning.getArity(); j ++) {
//        		HGHandle h = meaning.getTargetAt(j);
//        		if (!graph.get(h).equals(adjSense)) {
//        			System.out.println(graph.get(h).toString());        			
//        		}
//        		
//        		
//        	}
//        	
////        	System.out.println(graph.get(g).toString());
//        }
//        
        
        
        
       
        enWordnetButton.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent event) {
				graph = englishGraph;
				wnGraph = englishWNGraph;
				languageNum = 0;
			}
		});
        
        ruWordnetButton.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent event) {
				graph = russianGraph;
				wnGraph = russianWNGraph;	
				languageNum = 1;
			}
		});
        
        searchButton.setOnAction(new EventHandler<ActionEvent>() {
	        @Override
	        public void handle(ActionEvent event) {
//	        	wordMeaningArea.clear();
	        	wordMeaningArea.getChildren().clear();
	        	
	        	HGHandle wordHandle =  wnGraph.findWord(wordSearchField.getText());
//	        	System.out.println(wordHandle);
	        	if (wordHandle != null) {
	        		Relations relation = new Relations();

	        		NounList = wnGraph.getNounSenses(wordHandle);
	        		VerbList = wnGraph.getVerbSenses(wordHandle);
	        		AdjList = wnGraph.getAdjSenses(wordHandle);
	        		AdverbList = wnGraph.getAdverbSenses(wordHandle);
	            	
	        		wordMeaningArea.getChildren().add(NounHeader[languageNum]);

	        		if (!NounList.isEmpty()) {
	        			// Гиперссылки на синонимы
	        			List<Hyperlink> links = new ArrayList<Hyperlink>(); 
	        			
	        			int nounListSize = NounList.size();
		            	for (int i = 0; i < nounListSize; i++) {

		            		HGHandle sense =  NounList.get(i); // Значение слова
		            		/*Синсет конкретного значения слова
		            		 * Далее этот синсет используется для получения всех отношений
		            		 */
		            		SynsetLink wordSynset = graph.get(sense);
		            		
		            		// Вывод примеров
		            		relation.addExamples(i, wordSynset, wordMeaningArea, languageNum);
		            		// Вывод синонимов
		            		relation.addSynonyms(wnGraph, graph, wordSynset, wordMeaningArea, wordSearchField, searchButton, "Noun", languageNum);
		            		
						/***************************************
						 * Другие типы отношений 
						 * ************************************/
		            		TextFlow relationsTextFlow = viewElements.addOtherRelationsLabel(wordMeaningArea, languageNum);
			            	// Гипонимы
			            	Hyperlink kindOfLink = relation.addHyponyms(graph, wordSynset, wordMeaningArea, wordSearchField, searchButton, relationsTextFlow, languageNum);
			            	// Меронимы
			            	Hyperlink partOfLink = relation.addMeronyms(graph, wordSynset, wordMeaningArea, wordSearchField, searchButton, relationsTextFlow, languageNum);
	            			Hyperlink[] relHyperlinks = {kindOfLink, partOfLink};
	            			// Добавление гиперссылок на отношения(гипонимии, меронимии) в общее окно.
			            	viewElements.addOtherRelationsHyperlinks(wordMeaningArea, relHyperlinks, relationsTextFlow);
		       			}
	        		}
	        		else {
	        			wordMeaningArea.getChildren().add(new Text(notFoundLabel[languageNum]));
	        		}
	        		
	        		/*************************************
	        		 * Глаголы
	        		 * ***********************************/
	        		wordMeaningArea.getChildren().add(VerbHeader[languageNum]);
	        		if (!VerbList.isEmpty()) {
	        			int verbListSize = VerbList.size();
		            	for (int i = 0; i < verbListSize; i++) {
		            		HGHandle sense = VerbList.get(i);
		            		SynsetLink verbSynset = graph.get(sense);

		            		// Вывод примеров
		            		relation.addExamples(i, verbSynset, wordMeaningArea, languageNum);
		            		// Вывод синонимов
		            		relation.addSynonyms(wnGraph, graph, verbSynset, wordMeaningArea, wordSearchField, searchButton, "Verb", languageNum);
		       			}
	        		}
	        		else {
	        			wordMeaningArea.getChildren().add(new Text(notFoundLabel[languageNum]));
	        		}
	        		
	        		/****************************************
	        		 * Прилагательные
	        		 ****************************************/
	        		wordMeaningArea.getChildren().add(AdjHeader[languageNum]);
	        		if (!AdjList.isEmpty()) {
	        			int adjListSize = AdjList.size();
		            	for (int i = 0; i < adjListSize; i++) {
		            		HGHandle sense = AdjList.get(i);
		            		SynsetLink adjSynset = graph.get(sense);

		            		// Вывод примеров
		            		relation.addExamples(i, adjSynset, wordMeaningArea, languageNum);
		            		// Вывод синонимов
		            		relation.addSynonyms(wnGraph, graph, adjSynset, wordMeaningArea, wordSearchField, searchButton, "Adjective", languageNum);
		       			}
	        			
	        		}
	        		else {
	        			wordMeaningArea.getChildren().add(new Text(notFoundLabel[languageNum]));
	        		}
//	        		
	        		wordMeaningArea.getChildren().add(AdverbHeader[languageNum]);
	        		if (!AdverbList.isEmpty()) {
	        			int advbListSize = AdverbList.size();
		            	for (int i = 0; i < advbListSize; i++) {
		            		HGHandle sense = AdverbList.get(i);
		            		SynsetLink advbSynset = graph.get(sense);
		            		// Вывод примеров
		            		relation.addExamples(i, advbSynset, wordMeaningArea, languageNum);
		            		// Вывод синонимов
		            		relation.addSynonyms(wnGraph, graph, advbSynset, wordMeaningArea, wordSearchField, searchButton, "Adverb", languageNum);
		       			}
	        		}
	        		else {
	        			wordMeaningArea.getChildren().add(new Text(notFoundLabel[languageNum]));
	        		}
	        		
	        	}

	        }
        });
 
        
        wordSearchField.setOnKeyPressed(new EventHandler<KeyEvent>() {
            public void handle(KeyEvent ke) {
            	if (ke.getCode() == KeyCode.ENTER) {
            		searchButton.fire();
            	}
                
            }
        });
        Group root = new Group();
        HBox searchHBox = new HBox();
        HBox meaningHBox = new HBox();
        VBox vbox = new VBox();
        ScrollPane scrollPane = new ScrollPane();
        scrollPane.setPrefSize(450, 428);
        
        scrollPane.setContent(wordMeaningArea);
        searchHBox.getChildren().add(wordSearchField);
        searchHBox.getChildren().add(searchButton);
        searchHBox.getChildren().add(cb);
//        searchHBox.getChildren().add(enWordnetButton);
//        searchHBox.getChildren().add(ruWordnetButton);
        meaningHBox.getChildren().add(scrollPane);
        
        vbox.getChildren().add(searchHBox);
        vbox.getChildren().add(meaningHBox);
        
        root.getChildren().add(vbox);
        primaryStage.setScene(new Scene(root, 445, 450));
        primaryStage.setResizable(false);
        primaryStage.show();
    }
	
	public static void main(String[] args) {
		
//		loadWordnet(args);
		try
		{
			// Загрузка гипеграфа
//			graphArray[0] = HGEnvironment.get(args[1]);  // EnWordnet
//			graphArray[1] = HGEnvironment.get(args[2]); // RuWordnet
			
			englishGraph = new HyperGraph(args[1]);
			russianGraph = new HyperGraph(args[2]);
			graph = englishGraph;
//			graphArray[0] = new HyperGraph(args[1]);
//			graphArray[1] = new HyperGraph(args[2]);

//			graphArray[0].add(new SynsetLink())
			
			// Получение wordnetGraph
			
			englishWNGraph = new WNGraph(englishGraph);
			russianWNGraph = new WNGraph(russianGraph);
			wnGraph = englishWNGraph;
			
			
//			HGHandle perfect = wnGraphArray[0].findWord("perfect");
//			HGHandle little = wnGraphArray[0].findWord("little");
//			List<HGHandle> perfList = wnGraphArray[0].getNounSenses(perfect);
//			List<HGHandle> littleList = wnGraphArray[0].getNounSenses(little);
//			HGHandle perfSense = perfList.get(0); 
//			HGHandle littleSense = littleList.get(0); 
//			
//			HGHandle[] targ = new HGHandle[2];
//			HGHandle[] targ2 = new HGHandle[2];
//			targ2[0] = perfect;
//			targ2[1] = little;
//			targ[0] = perfSense;
//			targ[1] = littleSense;
			
			
			
			
//			SynsetLink synL = graphArray[0].get(perfSense);
//			HGHandle[] targets = synL.getTargets();
//			int ll = targets.length + 1;
//			HGHandle[] targets2 = new HGHandle[ll];
//			for (int k = 0; k < ll; k++) {
//				targets2[k] = targets[k];
//			}
//			targets2[ll-1] = littleSense;
//			
//			synL.setTargets(targets2);
//			graphArray[0].update(synL);
//			SynsetLink synLink = new NounSynsetLink();
//			synLink.setTargets(targ2);
			
			
			
			
			
			
//			SemanticLink link = new KindOf();
//			link.setTargets(targ);////			
//			graphArray[0].add(synLink);
//			graphArray[0].add(link);
//			wnGraphArray[0] = new WNGraph(graphArray[0]);
////			
			launch(args);
			
		}
		catch (Throwable t)
		{
			t.printStackTrace();
		}
		
		
		
	}
	
	public static void loadWordnet(String args[]) {
		HGWordNetLoader loader = new HGWordNetLoader();
	loader.setDictionaryLocation(args[0]);
	try
	{
	    HGConfiguration config = new HGConfiguration();
//	    BDBConfig bdbConfig = (BDBConfig)config.getStoreImplementation().getConfiguration();
	    // Change the storage cache from the 20MB default to 500MB
//	    bdbConfig.getEnvironmentConfig().setCacheSize(1000*1024*1024);
	    config.setTransactional(false);
		HyperGraph graph = HGEnvironment.get(args[1]);
		System.out.println("Loading WordNet to " + args[1] + " from dictionary " + args[0]);
		System.out.println("Atom count before : " + hg.count(graph, hg.all()));
		long startTime = System.currentTimeMillis();			
		loader.loadWordNet(graph);
		long endTime = System.currentTimeMillis();
		System.out.println("WordNet sucessfully loaded - " + (endTime - startTime)/1000/60 + " minutes.");
		System.out.println("Atom count after : " + hg.count(graph, hg.all()));
	}
	catch (Throwable t)
	{
		t.printStackTrace();
	}

	
	}
	
	public String firstUpperCase(String word){
		if(word == null || word.isEmpty()) return "";//или return word;
		return word.substring(0, 1).toUpperCase() + word.substring(1);
	}
	
	
	public static class extText extends Text implements Cloneable{
		 @Override
	     public extText clone() throws CloneNotSupportedException{
			 extText obj = (extText)super.clone();
	         return obj;
	     }
		 
		 public extText(String text) {
			 super(text);
		 }
	}
	
}